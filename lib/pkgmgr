#!/usr/bin/env bash

#####################################################################
##### GLOBAL VARIABLES                                          #####
#####################################################################

__TPSH__LIB__PKGMGR__DEFINED=${__TPSH__LIB__PKGMGR__DEFINED:-0}
if [ $__TPSH__LIB__PKGMGR__DEFINED -eq 1 ]; then
    return 0
else
    __TPSH__LIB__PKGMGR__DEFINED=1
fi
__TPSH__LIB__PKGMGR__THIS_DIR="$(dirname $BASH_SOURCE)"
__TPSH__LIB__PKGMGR__PKGMGRD="${__TPSH__LIB__PKGMGR__THIS_DIR}/pkgmgr.d"

#####################################################################
##### LOAD LIBRARIES                                            #####
#####################################################################

. "${__TPSH__LIB__PKGMGR__THIS_DIR}/logging"
. "${__TPSH__LIB__PKGMGR__THIS_DIR}/pkg"
for pkgmgr in $__TPSH__LIB__PKGMGR__PKGMGRD/*; do
    . $pkgmgr
done

#####################################################################
##### FUNCTIONS                                                 #####
#####################################################################

function tpsh_lib_pkgmgr_add() {
    local args="$@"
    local pkg=""

    tpsh_lib_pkgmgr_install_deps $args || return $?

    while [ $# -gt 0 ]; do
        arg="$1"
        case $arg in
            -*)
                ;;
            *)
                if [ $# -le 2 ] && [ -z "$pkg" ]; then
                    pkg="$arg"
                fi
        esac
        shift
    done

    tpsh_lib_pkgmgr_is_supported $args || return $?

    local pkgmgr=""
    pkgmgr="$(tpsh_lib_pkgmgr_select_preferred $args)" || return $?

    local pkgmgrd_cmd="tpsh_lib_pkgmgrd_${pkgmgr}_add"
    $pkgmgrd_cmd $args || return $?
}

function tpsh_lib_pkgmgr_current() {
    local args="$@"
    local pkg=""
    local verbose=0

    while [ $# -gt 0 ]; do
        arg="$1"
        case $arg in
            --verbose)
                verbose=1
                ;;
            -*)
                ;;
            *)
                if [ $# -eq 1 ]; then
                    pkg="$1"
                fi
                ;;
        esac
        shift
    done

    local supported_pkgmgrs=""
    supported_pkgmgrs="$(tpsh_lib_pkg_supported_pkgmgrs $args)" || return $?

    for pkgmgr in $supported_pkgmgrs; do
        if tpsh_lib_pkgmgr_is_installed --pkgmgr $pkgmgr $args; then
            echo $pkgmgr
            return 0
        fi
    done

    if [ $verbose -eq 1 ]; then
        tpsh_lib_log_err "pkg $pkg is not managed by any of its supported pkgmgrs"
    fi

    return 1
}

function tpsh_lib_pkgmgr_del() {
    local args="$@"
    local pkg=""

    #tpsh_lib_pkgmgr_uninstall_used_by $args || return $?

    while [ $# -gt 0 ]; do
        arg="$1"
        case $arg in
            -*)
                ;;
            *)
                if [ $# -le 2 ] && [ -z "$pkg" ]; then
                    pkg="$arg"
                fi
        esac
        shift
    done

    tpsh_lib_pkgmgr_is_supported $args || return $?

    local pkgmgr=""
    pkgmgr="$(tpsh_lib_pkgmgr_select_preferred $args)" || return $?

    local pkgmgrd_cmd="tpsh_lib_pkgmgrd_${pkgmgr}_del"
    $pkgmgrd_cmd $args || return $?
}

function tpsh_lib_pkgmgr_install_deps() {
    local args="$@"
    local deps=""
    local flags=""
    local pkg=""
    local verbose=0

    while [ $# -gt 0 ]; do
        arg="$1"
        case $arg in
            --verbose)
                verbose=1
                ;;
            -*)
                flags="$flags $arg"
                ;;
            *)
                if [ $# -le 2 ] && [ -z "$pkg" ]; then
                    pkg="$arg"
                fi
        esac
        shift
    done

    deps="$(tpsh_lib_pkg_deps $args)" || return $?

    printf "$deps" | while read line; do
        local pkg="$(echo " $line " | cut -f2 -d' ')"
        local version="$(echo " $line " | cut -f3 -d' ')"
        if [ -z "$version" ]; then
            version="$(tpsh_lib_pkg_default_version $args)"
        fi

        if [ $verbose -eq 1 ]; then
            tpsh_lib_log "installing dependency: pkg $pkg version $version"
        fi
        tpsh_lib_pkgmgr_add $flags $pkg $version || return $?
    done
}

function tpsh_lib_pkgmgr_is_installed() {
    local args="$@"
    local pkg=""

    while [ $# -gt 0 ]; do
        arg="$1"
        case $arg in
            -*)
                ;;
            *)
                if [ $# -le 2 ] && [ -z "$pkg" ]; then
                    pkg="$arg"
                fi
        esac
        shift
    done

    tpsh_lib_pkgmgr_is_supported $args || return $?

    local pkgmgr=""
    pkgmgr="$(tpsh_lib_pkgmgr_select_preferred $args)" || return $?

    local pkgmgrd_cmd="tpsh_lib_pkgmgrd_${pkgmgr}_is_installed"
    $pkgmgrd_cmd $args || return $?
}

function tpsh_lib_pkgmgr_is_supported() {
    local args="$@"
    local pkgmgr=""
    local verbose=0

    while [ $# -gt 0 ]; do
        arg="$1"
        case $arg in
            --pkgmgr)
                pkgmgr="$2"
                shift
                ;;
            --verbose)
                verbose=1
                ;;
        esac
        shift
    done

    local pkgmgr_path="${__TPSH__LIB__PKGMGR__PKGMGRD}/${pkgmgr}"
    if [ ! -e "$pkgmgr_path" ]; then
        if [ $verbose -eq 1 ]; then
            tpsh_lib_log_err "pkgmgr $pkgmgr is not defined at: $pkgmgr_path"
            return 1
        fi
    fi
}

function tpsh_lib_pkgmgr_select_preferred() {
    local args="$@"
    local pkg=""
    local pkgmgr=""
    local verbose=0

    while [ $# -gt 0 ]; do
        arg="$1"
        case $arg in
            --pkgmgr)
                pkgmgr="$2"
                shift
                ;;
            --verbose)
                verbose=1
                ;;
            -*)
                ;;
            *)
                if [ $# -le 2 ] && [ -z "$arg" ] ; then
                    pkg="$arg"
                fi
                ;;
        esac
        shift
    done

    # User may have requested a pkgmgr
    if [ ! -z "$pkgmgr" ]; then
        echo $pkgmgr
        return 0
    fi

    # Use the preferred pkgmgr of the pkg
    local supported_pkgmgrs=""
    supported_pkgmgrs="$(tpsh_lib_pkg_supported_pkgmgrs $args)" || return $?

    local preferred_pkgmgr=""
    preferred_pkgmgr=$(printf "$supported_pkgmgrs" | head -n 1) || return $?
    echo $preferred_pkgmgr
}
