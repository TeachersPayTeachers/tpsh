#!/usr/bin/env bash

#####################################################################
##### GLOBAL VARIABLES                                          #####
#####################################################################

__TPSH__LIB__PKGMGRD__SELF__DEFINED=${__TPSH__LIB__PKGMGRD__SELF__DEFINED:-0}
if [ $__TPSH__LIB__PKGMGRD__SELF__DEFINED -eq 1 ]; then
    return 0
else
    __TPSH__LIB__PKGMGRD__SELF__DEFINED=1
fi
__TPSH__LIB__PKGMGRD__SELF__THIS_DIR="$(dirname $BASH_SOURCE)"
__TPSH__LIB__PKGMGRD__SELF__LIB_DIR="${__TPSH__LIB__PKGMGRD__SELF__THIS_DIR}/.."

#####################################################################
##### LOAD LIBRARIES                                            #####
#####################################################################

. "${__TPSH__LIB__PKGMGRD__SELF__LIB_DIR}/logging"
. "${__TPSH__LIB__PKGMGRD__SELF__LIB_DIR}/pkg"

#####################################################################
##### FUNCTIONS                                                 #####
#####################################################################

function tpsh_lib_pkgmgrd_self_add() {
    tpsh_lib_pkgmgrd_self_pkgmr_source $@ || return $?

    local args="$@"
    local pkg=""
    local verbose=0

    while [ $# -gt 0 ]; do
        arg="$1"
        case $arg in
            --verbose)
                verbose=1
                ;;
            -*)
                ;;
            *)
                if [ $# -le 2 ] && [ -z "$pkg" ]; then
                    pkg="$arg"
                fi
                ;;
        esac
        shift
    done

    local pkg_clean_name="$(tpsh_lib_pkg_clean_name $pkg)"
    local pkgmgr_cmd="tpsh_pkg_${pkg_clean_name}_installer_install"

    local self_output=""
    self_output=$($pkgmgr_cmd $args)
    result=$?

    if [ $verbose -eq 1 ]; then
        self_msg_block="\n === begin pkg $pkg self-installer output === \n$self_output\n === end pkg $pkg self-installer output ==="
        if [ $result -eq 0 ]; then
            tpsh_lib_log "successfully installed ${pkg} $self_msg_block"
        else
            tpsh_lib_log_err "failed to install ${pkg} $self_msg_block"
        fi
    fi

    return $result;
}

function tpsh_lib_pkgmgrd_self_is_installed() {
    tpsh_lib_pkgmgrd_self_pkgmr_source $@ || return $?

    local pkg=""
    local verbose=0

    while [ $# -gt 0 ]; do
        arg="$1"
        case $arg in
            --verbose)
                verbose=1
                ;;
            -*)
                ;;
            *)
                if [ $# -le 2 ] && [ -z "$pkg" ]; then
                    pkg="$arg"
                fi
                ;;
        esac
        shift
    done

    local pkg_clean_name="$(tpsh_lib_pkg_clean_name $pkg)"
    local pkgmgr_cmd="tpsh_pkg_${pkg_clean_name}_installer_is_installed"

    local self_output=""
    self_output=$($pkgmgr_cmd $args 2>&1)
    result=$?

    if [ $verbose -eq 1 ]; then
        self_msg_block="\n === begin pkg $pkg self-installer output === \n$self_output\n === end pkg $pkg self-installer output ==="
        if [ $result -eq 0 ]; then
            tpsh_lib_log_err "pkg $pkg is installed $self_msg_block"
        else
            tpsh_lib_log_err "pkg $pkg is not installed $self_msg_block"
        fi
    fi

    return $result;
}

function tpsh_lib_pkgmgrd_self_pkgmr_path() {
    local args="$@"
    local verbose=0

    while [ $# -gt 0 ]; do
        arg="$1"
        case $arg in
            --verbose)
                verbose=1
                ;;
        esac
        shift
    done

    local platform_path=""
    platform_path="$(tpsh_lib_pkg_platform_path $args)" || return $?

    local pkgmgr_path="${platform_path}/installer"

    if [ -f "$pkgmgr_path" ]; then
        echo $pkgmgr_path
        return 0
    else
        if [ $verbose -eq 1 ]; then
            tpsh_lib_log_err "pkg $pkg does not have a self pkgmgr at: $pkgmgr_path"
        fi
        return 1
    fi
}

function tpsh_lib_pkgmgrd_self_pkgmr_source() {
    local pkgmgr_path=""
    pkgmgr_path="$(tpsh_lib_pkgmgrd_self_pkgmr_path $@)" || return $?
    . $pkgmgr_path
}
