#!/usr/bin/env bash

#####################################################################
##### GLOBAL VARIABLES                                          #####
#####################################################################

__TPSH__LIB__PKGMGRD__BREW__DEFINED=${__TPSH__LIB__PKGMGRD__BREW__DEFINED:-0}
if [ $__TPSH__LIB__PKGMGRD__BREW__DEFINED -eq 1 ]; then
    return 0
else
    __TPSH__LIB__PKGMGRD__BREW__DEFINED=1
fi
__TPSH__LIB__PKGMGRD__BREW__THIS_DIR="$(dirname $BASH_SOURCE)"
__TPSH__LIB__PKGMGRD__BREW__LIB_DIR="${__TPSH__LIB__PKGMGRD__BREW__THIS_DIR}/.."

#####################################################################
##### LOAD LIBRARIES                                            #####
#####################################################################

. "${__TPSH__LIB__PKGMGRD__BREW__LIB_DIR}/logging"

#####################################################################
##### FUNCTIONS                                                 #####
#####################################################################

function tpsh_lib_pkgmgrd_brew_add() {
    local pkg=""
    local verbose=0
    local version=""

    while [ $# -gt 0 ]; do
        arg="$1"
        case $arg in
            --verbose)
                verbose=1
                ;;
            -*)
                ;;
            *)
                if [ $# -le 2 ] && [ -z "$pkg" ]; then
                    pkg="$arg"
                elif [ $# -eq 1 ] && [ -z "$version" ]; then
                    version="$arg"
                fi
                ;;
        esac
        shift
    done

    tpsh_lib_pkgmgrd_brew_tap $args

    local brew_output=""
    local formula_name="$(tpsh_lib_pkgmgrd_brew_formula_name $args)"
    local version_string=""
    if [ ! -z "$version" ]; then
        version_string="@$version"
    fi

    if [ $verbose -eq 1 ]; then
        tpsh_lib_log "updating brew"
    fi
    brew update 2> /dev/null

    brew_output=$(brew install ${formula_name}${version_string})
    result=$?

    if [ $verbose -eq 1 ]; then
        local brew_msg_block="\n === begin brew output === \n\n$brew_output\n\n  === end brew output === "
        if [ ! -z "$brew_output" ]; then
            brew_msg_block=""
        fi
        if [ $result -eq 0 ]; then
            tpsh_lib_log "successfully installed ${pkg} ${version} with brew $brew_msg_block"
        else
            tpsh_lib_log_err "failed to install ${pkg} ${version} with brew $brew_msg_block"
        fi
    fi

    return $result;
}

function tpsh_lib_pkgmgrd_brew_del() {
    local pkg=""
    local verbose=0
    local version=""

    while [ $# -gt 0 ]; do
        arg="$1"
        case $arg in
            --verbose)
                verbose=1
                ;;
            -*)
                ;;
            *)
                if [ $# -le 2 ] && [ -z "$pkg" ]; then
                    pkg="$arg"
                elif [ $# -eq 1 ] && [ -z "$version" ]; then
                    version="$arg"
                fi
                ;;
        esac
        shift
    done

    local brew_output=""
    local formula_name="$(tpsh_lib_pkgmgrd_brew_formula_name $args)"
    local version_string=""
    if [ ! -z "$version" ]; then
        version_string="@$version"
    fi

    brew_output=$(brew uninstall ${formula_name}${version_string})
    result=$?

    [ $result -eq 0 ] && $(tpsh_lib_pkgmgrd_brew_untap $args)

    if [ $verbose -eq 1 ]; then
        local brew_msg_block="\n === begin brew output === \n\n$brew_output\n\n  === end brew output === "
        if [ ! -z "$brew_output" ]; then
            brew_msg_block=""
        fi
        if [ $result -eq 0 ]; then
            tpsh_lib_log "successfully uninstalled ${pkg} ${version} with brew $brew_msg_block"
        else
            tpsh_lib_log_err "failed to uninstall ${pkg} ${version} with brew $brew_msg_block"
        fi
    fi

    return $result;
}

function tpsh_lib_pkgmgrd_brew_formula_name() {
    local pkg=""
    local verbose=0

    while [ $# -gt 0 ]; do
        arg="$1"
        case $arg in
            --verbose)
                verbose=1
                ;;
            -*)
                ;;
            *)
                if [ $# -le 2 ] && [ -z "$pkg" ]; then
                    pkg="$arg"
                fi
                ;;
        esac
        shift
    done

    local formula_name="$pkg"
    local pkgmgr_config_path=""
    pkgmgr_config_path="$(tpsh_lib_pkg_pkgmgr_config_path --pkgmgr brew $args)"
    if [ $? -eq 0 ]; then
        if [ -f "$pkgmgr_config_path/formula-name.txt" ]; then
            formula_name="$(cat ${pkgmgr_config_path}/formula-name.txt)"
        fi
    fi

    echo $formula_name
}

function tpsh_lib_pkgmgrd_brew_is_installed() {
    local pkg=""
    local verbose=0
    local version=""

    while [ $# -gt 0 ]; do
        arg="$1"
        case $arg in
            --verbose)
                verbose=1
                ;;
            -*)
                ;;
            *)
                if [ $# -le 2 ] && [ -z "$pkg" ]; then
                    pkg="$arg"
                elif [ $# -eq 1 ] && [ -z "$version" ]; then
                    version="$arg"
                fi
                ;;
        esac
        shift
    done

    local brew_output=""
    local formula_name="$(tpsh_lib_pkgmgrd_brew_formula_name $args)"
    brew_output=$(brew ls --versions $formula_name 2>&1)
    result=$?

    if [ $result -eq 1 ]; then
        if [ $verbose -eq 1 ]; then
            local brew_msg_block=""
            if [ ! -z "$brew_output" ]; then
                brew_msg_block="\n === begin brew output === \n\n$brew_output\n\n  === end brew output === "
            fi
            tpsh_lib_log_err "brew does not have any versions of pkg installed: $pkg $brew_msg_block"
        fi
        return $result
    fi

    if [ -z "$version" ]; then
        return $result
    else
        printf "$brew_output" | grep "$version" > /dev/null
        result=$?
    fi

    if [ $verbose -eq 1 ]; then
        local brew_msg_block=""
        if [ ! -z "$brew_output" ]; then
            brew_msg_block="\n === begin brew output === \n\n$brew_output\n\n  === end brew output === "
        fi

        if [ $result -eq 0 ]; then
            tpsh_lib_log "brew does not have pkg installed: $pkg $version $brew_msg_block"
        else
            tpsh_lib_log_err "brew does not have pkg installed: $pkg $version $brew_msg_block"
        fi
    fi

    return $result;
}

function tpsh_lib_pkgmgrd_brew_tap() {
    local pkg=""
    local verbose=0

    while [ $# -gt 0 ]; do
        arg="$1"
        case $arg in
            --verbose)
                verbose=1
                ;;
            -*)
                ;;
            *)
                if [ $# -le 2 ] && [ -z "$pkg" ]; then
                    pkg="$arg"
                fi
                ;;
        esac
        shift
    done

    local formula_name="$pkg"
    local pkgmgr_config_path=""
    pkgmgr_config_path="$(tpsh_lib_pkg_pkgmgr_config_path --pkgmgr brew $args)"
    if [ $? -eq 0 ]; then
        if [ -f "$pkgmgr_config_path/tap.txt" ]; then
            brew tap $(cat "$pkgmgr_config_path/tap.txt")
        fi
    fi

    echo $formula_name
}

function tpsh_lib_pkgmgrd_brew_untap() {
    local pkg=""
    local verbose=0

    while [ $# -gt 0 ]; do
        arg="$1"
        case $arg in
            --verbose)
                verbose=1
                ;;
            -*)
                ;;
            *)
                if [ $# -le 2 ] && [ -z "$pkg" ]; then
                    pkg="$arg"
                fi
                ;;
        esac
        shift
    done

    local formula_name="$pkg"
    local pkgmgr_config_path=""
    pkgmgr_config_path="$(tpsh_lib_pkg_pkgmgr_config_path --pkgmgr brew $args)"
    if [ $? -eq 0 ]; then
        if [ -f "$pkgmgr_config_path/tap.txt" ]; then
            brew untap $(cat "$pkgmgr_config_path/tap.txt")
        fi
    fi

    echo $formula_name
}

