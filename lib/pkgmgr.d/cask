#!/usr/bin/env bash

#####################################################################
##### GLOBAL VARIABLES                                          #####
#####################################################################

__TPSH__LIB__PKGMGRD__CASK__DEFINED=${__TPSH__LIB__PKGMGRD__CASK__DEFINED:-0}
if [ $__TPSH__LIB__PKGMGRD__CASK__DEFINED -eq 1 ]; then
    return 0
else
    __TPSH__LIB__PKGMGRD__CASK__DEFINED=1
fi
__TPSH__LIB__PKGMGRD__CASK__THIS_DIR="$(dirname $BASH_SOURCE)"
__TPSH__LIB__PKGMGRD__CASK__LIB_DIR="${__TPSH__LIB__PKGMGRD__CASK__THIS_DIR}/.."

#####################################################################
##### LOAD LIBRARIES                                            #####
#####################################################################

. "${__TPSH__LIB__PKGMGRD__CASK__LIB_DIR}/logging"

#####################################################################
##### FUNCTIONS                                                 #####
#####################################################################

function tpsh_lib_pkgmgrd_cask_add() {
    local pkg=""
    local verbose=0
    local version=""

    while [ $# -gt 0 ]; do
        arg="$1"
        case $arg in
            --verbose)
                verbose=1
                ;;
            -*)
                ;;
            *)
                if [ $# -le 2 ] && [ -z "$pkg" ]; then
                    pkg="$arg"
                elif [ $# -eq 1 ] && [ -z "$version" ]; then
                    version="$arg"
                fi
                ;;
        esac
        shift
    done

    local cask_output=""
    local version_string=""
    if [ ! -z "$version" ]; then
        version_string="@$version"
    fi

    cask_output=$(brew cask install ${pkg} 2>&1)
    result=$?

    if [ $verbose -eq 1 ]; then
        local cask_msg_block=""
        if [ ! -z "$cask_output" ]; then
            cask_msg_block="\n === begin cask output === \n\n$cask_output\n\n  === end cask output === "
        fi

        if [ $result -eq 0 ]; then
            tpsh_lib_log "successfully installed pkg $pkg with cask $cask_msg_block"
        else
            tpsh_lib_log_err "failed to install pkg $pkg with cask $cask_msg_block"
        fi
    fi

    return $result;
}

function tpsh_lib_pkgmgrd_cask_del() {
    local pkg=""
    local verbose=0
    local version=""

    while [ $# -gt 0 ]; do
        arg="$1"
        case $arg in
            --verbose)
                verbose=1
                ;;
            -*)
                ;;
            *)
                if [ $# -le 2 ] && [ -z "$pkg" ]; then
                    pkg="$arg"
                elif [ $# -eq 1 ] && [ -z "$version" ]; then
                    version="$arg"
                fi
                ;;
        esac
        shift
    done

    local cask_output=""
    local version_string=""
    if [ ! -z "$version" ]; then
        version_string="@$version"
    fi

    cask_output=$(brew cask uninstall ${pkg} 2>&1)
    result=$?

    if [ $verbose -eq 1 ]; then
        local cask_msg_block=""
        if [ ! -z "$cask_output" ]; then
            cask_msg_block="\n === begin cask output === \n\n$cask_output\n\n  === end cask output === "
        fi

        if [ $result -eq 0 ]; then
            tpsh_lib_log "successfully uninstalled pkg $pkg with cask $cask_msg_block"
        else
            tpsh_lib_log_err "failed to uninstall pkg $pkg with cask $cask_msg_block"
        fi
    fi

    return $result;
}

function tpsh_lib_pkgmgrd_cask_is_installed() {
    local args="$@"
    local pkg=""
    local verbose=0
    local version=""

    while [ $# -gt 0 ]; do
        arg="$1"
        case $arg in
            --verbose)
                verbose=1
                ;;
            -*)
                ;;
            *)
                if [ $# -le 2 ] && [ -z "$pkg" ]; then
                    pkg="$1"
                elif [ $# -eq 1 ] && [ -z "$version" ]; then
                    version="$1"
                fi
                ;;
        esac
        shift
    done

    local installed_version=""
    if ! installed_version="$(tpsh_lib_pkgmgrd_cask_version $args)"; then
        if [ $verbose -eq 1 ]; then
            local cask_msg_block=""
            if [ ! -z "$cask_output" ]; then
                cask_msg_block="\n === begin cask output === \n\n$cask_output\n\n  === end cask output === "
            fi
            tpsh_lib_log_err "cask does not have any versions of pkg installed: $pkg $cask_msg_block"
        fi
        return 1
    fi

    [ -z "$version" ] && return 0

    if [ $verbose -eq 1 ]; then
        local cask_msg_block=""
        if [ ! -z "$cask_output" ]; then
            cask_msg_block="\n === begin cask output === \n\n$cask_output\n\n  === end cask output === "
        fi

        if [ "$installed_version" = "$version" ]; then
            tpsh_lib_log "cask has pkg installed: $pkg $version $cask_msg_block"
            return 0
        else
            tpsh_lib_log_err "cask pkg $pkg $installed_version is installed, not $version $cask_msg_block"
            return 1
        fi
    fi
}

function tpsh_lib_pkgmgrd_cask_version() {
    local pkg=""
    local verbose=0

    while [ $# -gt 0 ]; do
        arg="$1"
        case $arg in
            --verbose)
                verbose=1
                ;;
            -*)
                ;;
            *)
                if [ $# -le 2 ] && [ -z "$pkg" ]; then
                    pkg="$arg"
                fi
                ;;
        esac
        shift
    done

    local cask_output=""
    cask_output=$(brew cask info $pkg 2>&1)
    result=$?

    if [ $result -eq 1 ]; then
        if [ $verbose -eq 1 ]; then
            local cask_msg_block=""
            if [ ! -z "$cask_output" ]; then
                cask_msg_block="\n === begin cask output === \n\n$cask_output\n\n  === end cask output === "
            fi
            tpsh_lib_log_err "cask does not have any versions of pkg $pkg installed: $cask_msg_block"
        fi
        return $result
    fi

    local version=""
    version=$(printf "$cask_output" | head -n1 | cut -d' ' -f2 | tr -d "\n")
    result=$?

    if [ $verbose -eq 1 ]; then
        local cask_msg_block=""
        if [ ! -z "$cask_output" ]; then
            cask_msg_block="\n === begin cask output === \n\n$cask_output\n\n  === end cask output === "
        fi

        if [ $result -eq 0 ]; then
            echo $version
        else
            tpsh_lib_log_err "cask does not have pkg installed: $pkg $version $cask_msg_block"
        fi
    fi

    return $result;
}
